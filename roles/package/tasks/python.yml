---
- name: Install build dependencies for Python
  become: true
  ansible.builtin.package:
    name:
      - build-essential
      - pkg-config
      - libffi-dev
      - libssl-dev
      - libsqlite3-dev
      - libgdbm-dev
      - libgdbm-compat-dev
      - libnsl-dev
      - libncurses5-dev
      - libreadline-dev
      - liblzma-dev
      - libbz2-dev
      - tcl-dev
      - tk-dev
      - uuid-dev
    state: present
  tags: [package, python]

- name: Download Python source tarball
  become: true
  ansible.builtin.get_url:
    url: "https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tgz"
    dest: "/tmp/Python-{{ python_version }}.tgz"
    mode: "644"
  tags: [package, python]

- name: Extract Python source tarball
  become: true
  ansible.builtin.unarchive:
    src: "/tmp/Python-{{ python_version }}.tgz"
    dest: "/tmp"
    remote_src: true
  tags: [package, python]

- name: Configure Python installation
  become: true
  ansible.builtin.shell:
    cmd: |
      ./configure --prefix={{ python_install_path }} \
      --with-pydebug \
      --enable-optimizations \
      --with-lto \
      --with-ensurepip=install \
      --enable-loadable-sqlite-extensions
    chdir: "{{ python_src_dir }}"
  changed_when: false
  tags: [package, python]

- name: Compile Python
  become: true
  community.general.make:
    chdir: "{{ python_src_dir }}"
  tags: [package, python]

- name: Install Python
  become: true
  community.general.make:
    target: install
    chdir: "{{ python_src_dir }}"
  tags: [package, python]

- name: Create /opt/modulefiles/python directory for Lua modules
  become: true
  ansible.builtin.file:
    path: /opt/modulefiles/python
    state: directory
    owner: root
    group: root
    mode: "755"
  tags: [package, python]

- name: Create the Lua module file
  become: true
  ansible.builtin.copy:
    dest: "/opt/modulefiles/python/{{ python_version }}.lua"
    content: |
      whatis("Description: python version {{ python_version }}")

      -- Add the Python binary to the user's PATH
      prepend_path("PATH", "/opt/apps/python/{{ python_version }}/bin")

      -- Set pip package location
      local home = os.getenv("HOME")
      setenv("PIP_TARGET", pathJoin(home, "python/{{ python_version }}/packages"))
      prepend_path("PYTHONPATH", pathJoin(home, "python/{{ python_version }}/packages"))
      prepend_path("PATH", pathJoin(home, "python/{{ python_version }}/packages/bin"))

      -- Create aliases
      set_alias("python", "/opt/apps/python/{{ python_version }}/bin/python3")
      set_alias("pip", "/opt/apps/python/{{ python_version }}/bin/pip3")
    owner: root
    group: root
    mode: "644"
  tags: [package, python]

- name: Install ipykernel for Python {{ python_version }}
  become: true
  ansible.builtin.pip:
    name: ipykernel
    state: present
    executable: "/opt/apps/python/{{ python_version }}/bin/pip3"
  tags: [package, python]

- name: Register ipykernel for each Python version centrally
  become: true
  ansible.builtin.command: >
    /opt/apps/python/{{ python_version }}/bin/python3 -m ipykernel install
    --prefix=/opt/apps/python
    --name=python{{ python_version }}
    --display-name 'Python {{ python_version }}'
  args:
    creates: "/opt/apps/python/share/jupyter/kernels/python{{ python_version }}/kernel.json"
  when: "'controller' in group_names"
  tags: [package, python]

# required for JupyterLab
- name: Set symlinks for commands
  become: true
  ansible.builtin.file:
    src: "/opt/apps/python/{{ python_version }}/bin/{{ item.from }}"
    dest: "/opt/apps/python/{{ python_version }}/bin/{{ item.to }}"
    state: link
  loop:
    - from: python3
      to: python
    - from: pip3
      to: pip
  when: "'controller' in group_names"
  tags: [package, python]
