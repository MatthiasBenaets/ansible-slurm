---
- name: Install build dependencies for R
  become: true
  ansible.builtin.package:
    name:
      - build-essential
      - g++
      - libreadline-dev
      - libbz2-dev
      - liblzma-dev
      - libpcre2-dev
      - libssl-dev
      - libcurl4-openssl-dev
      - default-jdk
      - zlib1g-dev
    state: present
  when: "'controller' in group_names or 'nodes' in group_names"
  tags: [package, r]

- name: Install additional build dependencies for R packages
  become: true
  ansible.builtin.package:
    name:
      - curl
      - cargo
      - make
      - cmake
      - libudunits2-dev
      - libabsl-dev
      - libgdal-dev
      - libgeos-dev
      - libproj-dev
      - libpq-dev
      - librsvg2-dev
      - libsqlite3-dev
      - libxml2-dev
      - libfreetype6-dev
      - libfontconfig1-dev
      - libharfbuzz-dev
      - libfribidi-dev
      - libudunits2-dev
      - libsodium-dev
      - libpng-dev
      - libpng-dev
      - libtiff-dev
      - libtiff5-dev
      - libxml2-dev
      - libmagick++-dev
      - unixodbc-dev
      - git
    state: present
  when: "'nodes' in group_names"
  tags: [package, r]

- name: Download R source tarball
  become: true
  ansible.builtin.get_url:
    url: "https://cran.rstudio.com/src/base/R-{{ r_version.split('.')[0] }}/R-{{ r_version }}.tar.gz"
    dest: "/tmp/R-{{ r_version }}.tar.gz"
    mode: "644"
  when: "'controller' in group_names"
  tags: [package, r]

- name: Extract R source tarball
  become: true
  ansible.builtin.unarchive:
    src: "/tmp/R-{{ r_version }}.tar.gz"
    dest: "/tmp"
    remote_src: true
  when: "'controller' in group_names"
  tags: [package, r]

- name: Configure R installation
  become: true
  ansible.builtin.command:
    cmd: "./configure --prefix={{ r_install_path }} --enable-R-shlib --enable-memory-profiling --with-blas --with-lapack --with-x=no"
    chdir: "{{ r_src_dir }}"
  changed_when: false
  when: "'controller' in group_names"
  tags: [package, r]

- name: Compile R
  become: true
  community.general.make:
    chdir: "{{ r_src_dir }}"
  when: "'controller' in group_names"
  tags: [package, r]

- name: Install R
  become: true
  community.general.make:
    target: install
    chdir: "{{ r_src_dir }}"
  when: "'controller' in group_names"
  tags: [package, r]

- name: Create /opt/modulefiles/R directory for Lua modules
  become: true
  ansible.builtin.file:
    path: /opt/modulefiles/R
    state: directory
    owner: root
    group: root
    mode: "755"
  when: "'controller' in group_names"
  tags: [package, r]

- name: Create the Lua module file
  become: true
  ansible.builtin.copy:
    dest: "/opt/modulefiles/R/{{ r_version }}.lua"
    content: |
      whatis("Description: R programming language version {{ r_version }}")

      local home = os.getenv("HOME")

      -- Set the R_HOME and R_LIBS_USER environment variables
      setenv("R_HOME", "/opt/apps/R/{{ r_version }}/lib/R")
      setenv("R_LIBS_USER", pathJoin(home, "R/{{ r_version }}/library"))

      -- Add the R binary to the user's PATH
      prepend_path("PATH", "/opt/apps/R/{{ r_version }}/bin")
    owner: "root"
    group: "root"
    mode: "644"
  when: "'controller' in group_names"
  tags: [package, r]

- name: Create .Rprofile for default CRAN mirror and user packages
  become: true
  ansible.builtin.copy:
    dest: "/opt/apps/R/{{ r_version }}/lib/R/etc/Rprofile.site"
    content: |
      options(repos = c(CRAN = "https://cloud.r-project.org"))

      if (Sys.info()["user"] != "root") {
        user_library_path <- file.path(Sys.getenv("HOME"), "R", paste(version[c("major", "minor")], collapse = "."), "library")
        if (!dir.exists(user_library_path)) {
            dir.create(user_library_path, recursive = TRUE)
        }
        .libPaths(c(user_library_path, .libPaths()))
      }
    owner: "root"
    group: "root"
    mode: "644"
  when: "'controller' in group_names"
  tags: [package, r]

- name: Install R packages
  become: true
  ansible.builtin.shell: >
    /opt/apps/R/{{ r_version }}/bin/R
    -e 'install.packages(c("parallel","doParallel","foreach","future","future.batchtools","future.apply","batchtools","snow","Rmpi","rslurm","slurmR"),
    configure.args = c("--with-Rmpi-type=OPENMPI"))'
  changed_when: false
  when: "'controller' in group_names"
  tags: [package, r]

- name: Install IRkernel into R {{ r_version }}
  become: true
  ansible.builtin.command: >
    /opt/apps/R/{{ r_version }}/bin/R --vanilla -e
    "install.packages('IRkernel', repos='https://cloud.r-project.org')"
  args:
    creates: "/opt/apps/R/{{ r_version }}/lib/R/library/IRkernel"
  when: "'controller' in group_names"
  tags: [package, r]

- name: Create R kernelspec directory
  become: true
  ansible.builtin.file:
    path: "/opt/apps/R/share/jupyter/kernels/ir{{ r_version }}"
    state: directory
    mode: "0755"
  when: "'controller' in group_names"
  tags: [package, r]

# create manually so it does not require JupyterLab
- name: Centrally register IRkernel for R {{ r_version }}
  become: true
  ansible.builtin.copy:
    dest: "/opt/apps/R/share/jupyter/kernels/ir{{ r_version }}/kernel.json"
    mode: "0644"
    content: |
      {
        "argv": [
          "/opt/apps/R/{{ r_version }}/bin/R",
          "--slave",
          "-e",
          "IRkernel::main()",
          "--args",
          "{connection_file}"
        ],
        "display_name": "R {{ r_version }}",
        "language": "R"
      }
  when: "'controller' in group_names"
  tags: [package, r]

- name: Set logo
  become: true
  ansible.builtin.copy:
    src: "r/logo-svg.svg"
    dest: "/opt/apps/R/share/jupyter/kernels/ir{{ r_version }}/logo-svg.svg"
    mode: "0644"
    owner: root
    group: root
  when: "'controller' in group_names"
  tags: [package, r]
